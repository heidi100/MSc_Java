/*
 * The student mark systems View Course UI class that loads up when the view course 
 * button on the main ui is pressed.
 */
package studentmark;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 * @author Heidi Portwine (S6110438)
 */
public class ViewCourseUI extends javax.swing.JFrame 
{
    // Variables Declared.
    private static ArrayList<Course> courses = new ArrayList();
    private static ArrayList<Student> students = new ArrayList();
    public DefaultComboBoxModel coursesModel = new DefaultComboBoxModel();
    public DefaultListModel infoListModel = new DefaultListModel();
    public DefaultListModel infoListModel2 = new DefaultListModel();
    static Course course;
    static Module module;
    
    /**
     * Creates new form ViewCourseUI passing through the array list course.
     */
    public ViewCourseUI(ArrayList<Course> c) 
    {
        courses = c;
        initComponents();
        initComboBox();
        viewModuleList.setEnabled(false);
    }
    
    /**
     * Initalises the combo box for the courses.
     */
    public void initComboBox()
    {
        // Adds a message to the model first.
        coursesModel.addElement("Select ");
        
        // Loops through the courses.
        for(Course c : courses)
        {
            // Add the course codes to the model.
            coursesModel.addElement(c.code);
        }
        // Sets the course combo object to display the courses model.
        courseCombo.setModel(coursesModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        courseCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewModuleList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        courseCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseComboItemStateChanged(evt);
            }
        });

        viewList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        viewList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                viewListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(viewList);

        viewModuleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(viewModuleList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(courseCombo, 0, 109, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(courseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The action performed event for the back button on the view course UI.
     * This method will take the user back to the main UI screen when the button is pressed.
     * @param evt 
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        StudentMainUI stMain = new StudentMainUI(courses);
        stMain.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * The method triggered when the view list value is changed.
     * This method displays the modules in the array on to the list 
     * so the user can select one to view.
     * @param evt 
     */
    private void viewListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_viewListValueChanged

        // Clears the model to prevent duplicates.
        infoListModel2.clear();
        
        // Checks if the view list selection is not empty.
        if(!viewList.isSelectionEmpty())
        {
            if(evt.getValueIsAdjusting() == false)
            {
                // Loops through the courses.
                for(Course cou : courses)
                {
                    // Loops through the modules.
                    for(Module mod : cou.getModule())
                    {
                        // Checks if the view list selection is not empty
                        if(!viewList.isSelectionEmpty())
                        {
                            // Sets the variables to get the modules data.
                            String modT = mod.getModuleTitle();
                            int passM = mod.getPassMark();
                            int stN = mod.getStudentNumber();
                            double a = 0;
                            int p = 0;
                            int f = 0;
                            
                            // Checks that the item selected equals the module code.
                            if(viewList.getSelectedValue().equals(mod.getCode()))
                            {
                                // Sets students to be the courses students.
                                students = cou.getStudents();
                                
                                // Checks that the student number is not 0.
                                if(stN != 0)
                                {
                                    // Sets the averages, passes, fails.
                                    a = mod.getAverage(students);
                                    p = mod.getPass(students);
                                    f = mod.getFail(students); 
                                } 

                                // Adds the elements to the model so they can be displayed in the correct layout.
                                infoListModel2.addElement("Module Title : " + modT);
                                infoListModel2.addElement("Pass Mark : " + passM);
                                infoListModel2.addElement("Number of Students : " + stN);
                                infoListModel2.addElement("Average Mark : " + a);
                                infoListModel2.addElement("Number of Passes : " + p); 
                                infoListModel2.addElement("Number of Fails : " + f); 
                            } 
                        }
                    }
                }
                // Sets the view module list object to dsplay the model.
                viewModuleList.setModel(infoListModel2); 
            }
        }
        
    }//GEN-LAST:event_viewListValueChanged
    /**
     * This method deals with the combo box xhange in state.
     * @param evt 
     */
    private void courseComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseComboItemStateChanged
        
        // Clears the model to prevent duplicates.
        infoListModel.clear(); 

        // Checks that the event is due to the combo box.
        if(evt.getSource() == courseCombo)
        {
            // Sets the variables to combo box item.
            String courseCom = courseCombo.getSelectedItem().toString();
            int cIndex = 0;
            int mIndex = 0;
            
            // Loops through the courses.
            for(Course cou : courses)
            {
                // Checks that the course code is equal to the combo box.
                if(cou.getCode().equals(courseCom))
                {
                    // Loops through the modules.
                    for(Module mod : cou.getModule())
                    {
                        // Adds the module codes to the model.
                        infoListModel.addElement(mod.getCode());
                    }
                }
                // Sets the view list to display the model.
                viewList.setModel(infoListModel);
                
            }
        }
    }//GEN-LAST:event_courseComboItemStateChanged

    /**
     * The main method for the view course UI.
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewCourseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewCourseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewCourseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewCourseUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new ViewCourseUI(courses).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> courseCombo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> viewList;
    private javax.swing.JList<String> viewModuleList;
    // End of variables declaration//GEN-END:variables
}
