/*
 * The student mark systems main screen when the GUI loads up.
 */
package studentmark;

import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultListModel;

/**
 * @author Heidi Portwine (s6110438)
 */
public class StudentMainUI extends javax.swing.JFrame 
{
    // Variables Declared.
    private static ArrayList<Course> courses = new ArrayList();
    private static ArrayList<Student> students = new ArrayList();
    public DefaultListModel studentListModel = new DefaultListModel();
    public DefaultListModel infoListModel = new DefaultListModel();
    public static Student cStu;
    
    /**
     * Creates new form StudentMainUI passing through the array list course
     */
    public StudentMainUI(ArrayList<Course> c) 
    {
        courses = c;
        initComponents();
        initStudentList();
        displayInfoList.setEnabled(false);
    }

    /**
     * Initalises the student list.
     */
    public void initStudentList()
    {
        // Clears the student list model to prevent duplicates.
        studentListModel.clear();
        
        // Loops through the courses.
        for(Course c : courses)
        {
            // Loops through the students on the course.
           for(Student stu : c.getStudents() )
           {
               // Adds the stdent IDs to the student list model.
               students.add(stu);
               studentListModel.addElement(stu.getStudentID());
            } 
        }
        // Sets the student list object to display the student list model.
        studentList.setModel(studentListModel);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayInfoList = new javax.swing.JList<>();
        addButton = new javax.swing.JButton();
        AddMarkButton = new javax.swing.JButton();
        viewCourseButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        studentList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Student 1", "Student 2", "Student 3", "Student 4" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        studentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(studentList);

        displayInfoList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(displayInfoList);

        addButton.setText("Add Student");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        AddMarkButton.setText("Add Mark");
        AddMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMarkButtonActionPerformed(evt);
            }
        });

        viewCourseButton.setText("View Course Info");
        viewCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCourseButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Welcome to the Student Marking System.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(AddMarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(viewCourseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addGap(25, 25, 25))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel1)
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewCourseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AddMarkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The action performed event for the add student button on the main UI.
     * This will take the user to the Add Students UI class, 
     * while passing through the courses array.
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddStudentsUI addSt = new AddStudentsUI(courses);
        addSt.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * The action performed event for the add mark button on the main UI.
     * This will take the user to the Add Mark UI class, 
     * while passing through the contacts array and the current student selected.
     * @param evt 
     */
    private void AddMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMarkButtonActionPerformed
        AddMarksUI addMa = new AddMarksUI(courses, cStu);
        addMa.setVisible(true);
        this.setVisible(false); 
    }//GEN-LAST:event_AddMarkButtonActionPerformed

    /**
     * The action performed event for the close button on the main UI.
     * This will completely close the system and stop the code running.
     * @param evt 
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * The method triggered when the student list value is changed.
     * This method displays the students in the array on to the list 
     * so the user can select one to view.
     * @param evt 
     */
    private void studentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_studentListValueChanged
        
        // Clears the model to prevent duplicates.
        infoListModel.clear();
        
        // Checks if the student list selection is not empty.
        if(!studentList.isSelectionEmpty())
        {
            if(evt.getValueIsAdjusting() == false)
            {
                // Clears the model to prevent duplicates.
                infoListModel.clear();
                
                // Loops through the students using a for loop.
                for(Student stu : students)
                { 
                    // Sets the variables to get the students data.
                    String studentID = stu.getStudentID();
                    String fName = stu.getfName();
                    String lName = stu.getlName();
                    String course = stu.getCourse();
                    double av = 0;
                    int p = 0;
                    int f = 0;

                    // If the the student list select item equals the student ID.
                    if(studentList.getSelectedValue().equals(studentID))
                    {
                        // Clears the model to prevent duplicates.
                        infoListModel.clear();
                        
                        // Sets the current student to student.
                        cStu = stu;
                        
                        // Checks if the student has marks.
                        if(!stu.getMarks().isEmpty())
                        {
                            // Sets the average variable to be the students average mark.
                            av = stu.getAverage();
                           
                            // Loops through the courses.
                            for(Course c : courses)
                            {
                                // Checks if the course code is equal to the students course.
                                if(c.getCode().equals(stu.getCourse()))
                                {
                                    // Sets the variables to be the students passess and fails.
                                    p = stu.getPasses(c);
                                    f = stu.getFails(c);
                                }
                            }
                        }
                    
                        // Adds the elements to the model so they can be displayed in the correct layout.
                        infoListModel.addElement("Student Id : " + studentID);
                        infoListModel.addElement("First Name : " + fName);
                        infoListModel.addElement("Last Name : " + lName);
                        infoListModel.addElement("Course : " + course);
                        infoListModel.addElement("Average : " + av);
 
                        infoListModel.addElement("Passes : " + p);
                        infoListModel.addElement("Fails : " + f);
                        infoListModel.addElement("------------------------------- ");
                        infoListModel.addElement("Module Marks ");
                        
                        // Checks if the student has marks
                        if(!stu.getMarks().isEmpty())
                        {
                            // Checks the map for the students marks.
                            for(Map.Entry m : stu.getMarks().entrySet())
                            {
                                // Adda it to the model.
                                infoListModel.addElement("Module Code : " + m.getKey() + " " + " Mark : " + m.getValue().toString());
                            }
                        }
                    } 
                }
                // Sets the display info list to display the info list model.
                displayInfoList.setModel(infoListModel); 
            }
        }
    }//GEN-LAST:event_studentListValueChanged

    /**
     * The action performed event for the view course button on the main UI.
     * This will take the user to the View Course UI class, 
     * while passing through the contacts array and the current student selected.
     * @param evt 
     */
    private void viewCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCourseButtonActionPerformed
        ViewCourseUI viewC = new ViewCourseUI(courses);
        viewC.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_viewCourseButtonActionPerformed

    /**
     * The main method for the main UI.
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentMainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new StudentMainUI(courses).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddMarkButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JList<String> displayInfoList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> studentList;
    private javax.swing.JButton viewCourseButton;
    // End of variables declaration//GEN-END:variables
}
